import { Job } from "@/models";
import { formatFileSize } from "@/utils";
import { Delete } from "@mui/icons-material";
import BookmarkBorder from "@mui/icons-material/BookmarkBorder";
import Email from "@mui/icons-material/Email";
import InsertDriveFile from "@mui/icons-material/InsertDriveFile";
import { IconButton, Input } from "@mui/material";
import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import Checkbox from "@mui/material/Checkbox";
import blue from "@mui/material/colors/blue";
import grey from "@mui/material/colors/grey";
import lightBlue from "@mui/material/colors/lightBlue";
import red from "@mui/material/colors/red";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogTitle from "@mui/material/DialogTitle";
import Divider from "@mui/material/Divider";
import FormControl from "@mui/material/FormControl";
import FormControlLabel from "@mui/material/FormControlLabel";
import Slide from "@mui/material/Slide";
import TextField from "@mui/material/TextField";
import { TransitionProps } from "@mui/material/transitions";
import Typography from "@mui/material/Typography";
import Image from "next/image";
import React, { MouseEvent } from "react";
import { ChangeEvent, useEffect } from "react";

const Transition = React.forwardRef(function Transition(
    props: TransitionProps & {
        children: React.ReactElement<any, any>;
    },
    ref: React.Ref<unknown>,
) {
    return <Slide direction="up" ref={ref} {...props} />;
});

type ApplicationDialogProps = {
    isOpen: boolean;
    cvFile: File | null;
    phoneNumber: string | null;
    hasCoverLetter: boolean;
    coverLetter: string | null;
    job: Job;
    onClose: () => void;
    setCvFile: (file: File | null) => void;
    setPhoneNumber: (newPhone: string) => void;
    sendApplication: () => Promise<void>;
    setCoverLetter: (newValue: string) => void;
    setHashCoverLetter: (newValue: boolean) => void;
}

const ApplicationDialog: React.FC<ApplicationDialogProps> = (props) => {
    useEffect(() => {
        console.log("üöÄ ~ props.phoneNumber:", props.phoneNumber)
    }, [props.phoneNumber])
    // useEffect(() => {
    //     console.log("üöÄ ~ props.coverLetter:", props.coverLetter)
    // }, [props.coverLetter])

    // useEffect(() => {
    //     console.log("üöÄ ~ props.cvFile:", props.cvFile)
    // }, [props.cvFile])
    const changePhoneNumber = (event: ChangeEvent<HTMLInputElement>) => {
        const newValue = event.target.value;
        props.setPhoneNumber(newValue);
    }
    const toggleHasCoverLetter = (_: ChangeEvent<HTMLInputElement>, checked: boolean) => {
        props.setHashCoverLetter(!props.hasCoverLetter);
        console.log("üöÄ ~ toggleHasCoverLetter ~ checked:", checked)
    }

    const changeCoverLetter = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const newValue = event.target.value;
        props.setCoverLetter(newValue);
    }
    const changeFile = (event: ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (file) {
            props.setCvFile(file);
            console.log("File uploaded:", file.name);
        }
    };
    const onClickDropFile = (event: MouseEvent<HTMLButtonElement>) => {
        event.preventDefault();
        dropFile();
    }
    const dropFile = () => {
        props.setCvFile(null);
    }

    function logForm(): void {
        console.log("üöÄ ~ logForm ~ props.phoneNumber:", props.phoneNumber)
        console.log("üöÄ ~ logForm ~ props.hasCoverLetter:", props.hasCoverLetter)
        console.log("üöÄ ~ logForm ~ props.coverLetter:", props.coverLetter)
        console.log("üöÄ ~ logForm ~ props.cvFile:", props.cvFile)
    }

    return (
        <Dialog
            TransitionComponent={Transition}
            onClose={props.onClose}
            open={props.isOpen}>
            <DialogTitle>B·∫°n ƒëang ·ª©ng tuy·ªÉn cho <strong>{props.job.company.name}</strong> v·ªõi v·ªã
                tr√≠ <strong>{props.job.title}</strong>
                <Image
                    alt={props.job.company.name}
                    width={100}
                    height={100}
                    src={props.job.company.logo}></Image>
            </DialogTitle>
            <DialogContent>
                <Box sx={{
                    display: "flex",
                    paddingY: 1
                }}>
                    <InsertDriveFile sx={{ marginRight: 1 }}></InsertDriveFile>
                    <Typography sx={{ fontWeight: "bold" }}>
                        H·ªì s∆° xin vi·ªác *
                    </Typography>
                </Box>
                <label htmlFor="upload-cv">
                    {props.cvFile ?
                        <Box sx={{
                            '&:hover': {
                                bgcolor: blue[300],
                                color: "white"
                            },
                            '&:has(> .delete-button:hover)': {
                                bgcolor: lightBlue[50], // Revert to original when hovering over B
                                color: blue[500]
                            },
                            cursor: "pointer",
                            border: 1,
                            borderColor: blue[500],
                            borderStyle: "dashed",
                            borderRadius: 1,
                            display: "flex",
                            flexDirection: "column",
                            justifyContent: "center",
                            padding: 2,
                            background: lightBlue[50],
                            color: blue[500]
                        }}>
                            <Typography variant="h6" textAlign={"center"}>{props.cvFile.name}</Typography>
                            <Typography color={grey[500]} textAlign={"center"}>{formatFileSize(props.cvFile.size)}</Typography>
                            <Button
                                className="delete-button"
                                onClick={onClickDropFile}
                                startIcon={<Delete />}
                                sx={{
                                    color: red[500],
                                    "&:hover": {
                                        color: "white",
                                        bgcolor: "red"
                                    }
                                }}>
                                X√≥a t·∫≠p tin
                            </Button>
                        </Box>
                        :
                        <Box sx={{ cursor: "pointer", border: 1, borderColor: blue[500], borderStyle: "dashed", borderRadius: 1, display: "flex", justifyContent: "center", padding: 2, background: lightBlue[50], color: blue[500] }}>
                            <InsertDriveFile sx={{ marginX: 1 }}></InsertDriveFile>
                            <Typography sx={{ fontWeight: "bold" }}>
                                ƒêƒÉng t·∫£i h·ªì s∆° c·ªßa t√¥i
                            </Typography>
                        </Box>
                    }
                </label>
                <Input
                    onChange={changeFile}
                    sx={{ display: "none" }}
                    id="upload-cv"
                    type="file"></Input>
                <Typography
                    paddingY={1}
                    variant='body2'
                    sx={{ color: grey[500] }} >
                    L∆∞u √Ω : ƒë·∫£m b·∫£o h·ªì s∆° xin vi·ªác c·ªßa b·∫°n s·ª≠ d·ª•ng ng√¥n ng·ªØ tr√πng kh·ªõp v·ªõi m√¥ t·∫£ c√¥ng vi·ªác (V√≠ d·ª•: vi·∫øt CV b·∫±ng ti·∫øng Anh n·∫øu m√¥ t·∫£ c√¥ng vi·ªác b·∫±ng ti·∫øng Anh) v√† ƒëƒÉng t·∫£i d∆∞·ªõi d·∫°ng PDF d∆∞·ªõi 5MB.
                    H·ªì s∆° ƒë√£ ƒëƒÉng t·∫£i s·∫Ω ƒë∆∞·ª£c l∆∞u l·∫°i cho l·∫ßn n·ªôp ƒë∆°n sau.
                </Typography>
                <TextField
                    fullWidth
                    onChange={changePhoneNumber}
                    value={props.phoneNumber}
                    required label='S·ªë ƒëi·ªán tho·∫°i' type="number" sx={{ marginTop: 1 }} slotProps={{
                        input: {
                            startAdornment:
                                <Box sx={{ display: "inline-flex" }}>
                                    <Typography>+84</Typography>
                                    <Divider sx={{ opacity: 1, borderRightWidth: 2, marginX: 1 }} variant='fullWidth' orientation='vertical' flexItem></Divider>
                                </Box>
                        }
                    }}></TextField>
                <Box display="flex" paddingY={1}>
                    <Email sx={{ marginRight: 1 }}></Email>
                    <Typography fontWeight={"bold"}>
                        Th∆∞ xin vi·ªác
                    </Typography>
                </Box>
                <FormControl fullWidth>
                    <FormControlLabel
                        label="T√¥i ƒë√£ c√≥ th∆∞ xin vi·ªác"
                        control={<Checkbox onChange={toggleHasCoverLetter} checked={props.hasCoverLetter}></Checkbox>}>
                    </FormControlLabel>
                    {props.hasCoverLetter &&
                        <TextField
                            onChange={changeCoverLetter}
                            value={props.coverLetter}
                            label="Vi·∫øt th∆∞ xin vi·ªác c·ªßa b·∫°n"
                            rows={4}
                            multiline
                            fullWidth></TextField>
                    }
                </FormControl>
            </DialogContent>

            <DialogActions>
                <Box
                    width={"100%"}
                    display="flex"
                    flexDirection="column"
                    justifyContent="center">
                    <Button
                        onClick={logForm}
                        sx={{ height: 50 }}
                        fullWidth
                        variant="contained"
                        color="primary">
                        ·ª®NG TUY·ªÇN NGAY
                    </Button>
                    <Box paddingY={1}>
                        <Typography textAlign="center">B·∫°n ch∆∞a chu·∫©n b·ªã h·ªì s∆°?</Typography>
                        <Typography textAlign={"center"}>H√£y l∆∞u l·∫°i vi·ªác l√†m ƒë·ªÉ ·ª©ng tuy·ªÉn sau.</Typography>
                    </Box>
                    <Box
                        display={"flex"}
                        justifyContent={"center"}
                        color={blue[500]}>
                        <BookmarkBorder sx={{ marginRight: 1 }}></BookmarkBorder>
                        <Typography textAlign={"center"} >
                            ƒê√°nh d·∫•u l∆∞u l·∫°i v·ªã tr√≠ c√¥ng vi·ªác
                        </Typography>
                    </Box>
                </Box>
            </DialogActions>
        </Dialog >
    );
}

export default ApplicationDialog;